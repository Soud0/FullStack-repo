--1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
-- Usually join will have a better perforamnce than subquery, join is more faster than subquery

--2.	What is CTE and when to use it?
-- CTE is common table expression. Temporary result set, query will be more readable.
-- If you need to reference/join the same data set multiple times you can do so by defining a CTE.

--3.	What are Table Variables? What is their scope and where are they created in SQL Server?
-- Table variables are local variables that help to store data temporalarily
-- The table variable provides all the properties of the local variable, but the local variables have some limitations

--4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
-- Delete is a DML command whereas truncate is DDL command. Truncate can be used to delete the entire data of the table without maintaining the integrity of the table. On the other hand , delete statement can be used for deleting the specific data.

--5.	What is Identity column? How does DELETE and TRUNCATE affect it?
-- An identity column is a column in a database table that is made up of values generated by the database. 
-- will decrease Id

-- 6.	What is difference between ¡°delete from table_name¡± and ¡°truncate table table_name¡±?
-- delete can contain where clause, which truncate can't.

USE Northwind
GO

--1. 
SELECT e.City 
FROM Employees e INNER JOIN Customers c ON e.City = c.City


--2a.
SELECT c.City
FROM Customers c
WHERE c.City NOT IN (SELECT e.City FROM Employees e)

--2B.
SELECT c.City 
FROM Customers c full JOIN Employees e
on c.City =e.City

--3
SELECT p.ProductName,COUNT(o.Quantity)AS TOTAL
FROM Products p JOIN [Order Details] o
ON p.ProductID=o.ProductID
GROUP BY p.ProductName

--4
SELECT City,p.ProductName
FROM Customers c CROSS JOIN Products p
ORDER BY c.City

--5 a.
SELECT a.City
FROM Customers a
GROUP BY a.City
HAVING COUNT(a.City)>=2
UNION
SELECT a.City
FROM Customers a
GROUP BY a.City
HAVING COUNT(a.City)>=2

--5b.
SELECT City
FROM Customers WHERE City IN(
SELECT City 
FROM Customers 
GROUP BY City
HAVING COUNT(City)>=2
)

--6
SELECT c.City
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID 
WHERE o.OrderID IN (
SELECT od.OrderID 
FROM [Order Details] od JOIN Products p 
ON od.ProductID = p.ProductID
GROUP BY od.OrderID
HAVING COUNT(p.ProductName)>=2)
GROUP BY c.City

--7.
SELECT c.ContactName
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.City!= o.ShipCity AND o.OrderID IS NOT NULL

--8 

SELECT TOP 5 ProductName,AVG(UnitPrice) AS [AvgPrice],
(SELECT City From Customers) AS City
FROM Products  
GROUP BY ProductName 

--9a.
SELECT e.City
FROM Employees e JOIN Orders o ON e.City = o.ShipCity
WHERE o.OrderID is NOT NULL
GROUP BY e.City

--9B
SELECT e.City
FROM Employees e
WHERE e.City IN(
SELECT o.ShipCity FROM Orders o GROUP BY o.ShipCity HAVING COUNT(o.OrderID)>0)
GROUP BY e.City

--10

/*
--11
With CTE_Duplicates as 
(select id,name , row_number() 
over(partition by id,name order by id,name ) rownumber  from table  ) 
delete from CTE_Duplicates where rownumber!=1
*/

--12


--13


--14



